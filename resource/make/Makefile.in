#!/usr/bin/make -f

# Makefile for PassGen project
# @configure_input@

# Документация с примерами: http://linux.yaroslavl.ru/docs/prog/make_intro_ru.html

prefix         =    @prefix@
exec_prefix    =    @exec_prefix@
# Каталог, куда будет установлена программа
bindir         =    @bindir@
sbindir        =    @sbindir@
libexecdir     =    @libexecdir@
sysconfdir     =    @sysconfdir@
sharedstatedir =    @sharedstatedir@
localstatedir  =    @localstatedir@
libdir         =    @libdir@
includedir     =    @includedir@
oldincludedir  =    @oldincludedir@
datarootdir    =    @datarootdir@
datadir        =    @datadir@
infodir        =    @infodir@
# Каталог для установки файлов локализации
localedir      =    @localedir@
# Каталог для установки файлов manpage
mandir         =    @mandir@
docdir         =    @docdir@
htmldir        =    @htmldir@
dvidir         =    @dvidir@
pdfdir         =    @pdfdir@
psdir          =    @psdir@

PACKAGE_NAME        =    @PACKAGE_NAME@
PACKAGE_VERSION     =    "@PACKAGE_VERSION@"
PACKAGE_URL         =    @PACKAGE_URL@
PACKAGE_DESCRIPTION =    "@PACKAGE_DESCRIPTION@"
PACKAGE_TARNAME     =    "@PACKAGE_TARNAME@"

PACKAGE_AUTHOR      =    "@PACKAGE_AUTHOR@"
PACKAGE_EMAIL       =    @PACKAGE_BUGREPORT@
PACKAGE_LICENSE     =    @PACKAGE_LICENSE@

# Рабочая оболочка
SHELL           =    /bin/bash
# Зависимости пакета
DEPENDENCIES    =    ""
# Файл с описанием пакета
DESCRIPTIONFILE =    "./description-pak"
# Каталог для собранного бинарного файла
BINDIR          =    ./bin
# Каталог для сборки пакета
BUILDDIR        =    ./build
# Каталог с исходниками программы
SRCDIR          =    ./source
# Каталог для файлов локализации
LOCALEDIR       =    ./locale
# Каталог для manpage
MANDIR          =    ./man
# Список каталогов для локализаций (имя каталога соответствует языку: ru_RU, en_US и т. п.)
LOCALES         =    $$(find $(LOCALEDIR) -mindepth 1 -maxdepth 1 -type d)
# Имя файла локализации
LOCALE_MO       =    $(PACKAGE_NAME).mo
# Флаги компилятора
CFLAGS          =    @CFLAGS@
CPPFLAGS        =    @CPPFLAGS@
LDFLAGS         =    @LDFLAGS@
CCFLAGS         =    $(CFLAGS) -Wall -std=c99 -fpic -I$(SRCDIR)/h
DEFS            =    @DEFS@ -D_XOPEN_SOURCE=600 -DPACKAGE_LOCALE_DIR=\"locale\"
# Файлы и папки, которые удалятся по команде make [dist]clean
CLEANED         =    $(BINDIR) ./*.o ./*.*~
DISTCLEANED     =    $(BUILDDIR) ./*.m4 ./*.log ./*.man ./*.scan ./*.status ./autom4te.* ./Makefile ./.fuse_hidden* ./$(SRCDIR)/h/*.h.in~ ./$(SRCDIR)/h/stamp-h1 ./translate.sh

CHARSET         =    UTF-8

ONELINEOKMSG    =    "[$(PACKAGE_NAME)]: TEST - single line: OK"
ONELINEERRMSG   =    "[$(PACKAGE_NAME)]: TEST - single line: ERROR"
MULTILINEOKMSG  =    "[$(PACKAGE_NAME)]: TEST - multi line: OK"
MULTILINEERRMSG =    "[$(PACKAGE_NAME)]: TEST - multi line: ERROR"

# http://linux.yaroslavl.ru/docs/prog/gnu_make_3-79_russian_manual.html#SEC27
VPATH           =    $(SRCDIR)

# http://linux.yaroslavl.ru/docs/prog/gnu_make_3-79_russian_manual.html#SEC28
vpath %.h $(SRCDIR)/h
vpath %.c $(SRCDIR)
vpath %.o .

# http://linux.yaroslavl.ru/docs/prog/gnu_make_3-79_russian_manual.html#SEC25
objects        :=    $(patsubst $(SRCDIR)/%.c,%.o,$(wildcard $(SRCDIR)/*.c))

.PHONY: all debug build clean distclean install uninstall check help doc

# Запускаем сборку бинарника
all: $(PACKAGE_NAME)
	@chmod +x ./translate.sh
	@echo $(PACKAGE_DESCRIPTION) > $(DESCRIPTIONFILE)
	@printf "%`tput cols`s"|tr ' ' '-'

$(PACKAGE_NAME): $(objects)
	@mkdir -p $(BINDIR)
	@printf "%`tput cols`s"|tr ' ' '-'
	$(CC) $(DEFS) $(CCFLAGS) -o $(BINDIR)/$(PACKAGE_NAME) $?
	@strip -s $(BINDIR)/$(PACKAGE_NAME) # Удаляем отладочную информацию из бинарника
	@echo "[$(PACKAGE_NAME)] - Project compiled"

%.o: %.c
	$(CC) $(DEFS) $(CCFLAGS) -c $?

# Запускаем сборку бинарника в отладочном режиме, для использования gdb
debug: $(objects)
	@mkdir -p $(BINDIR)
	@printf "%`tput cols`s"|tr ' ' '-'
	$(CC) $(DEFS) -DDEBUG=1 $(CCFLAGS) -o $(BINDIR)/$(PACKAGE_NAME) $?
	@echo "[$(PACKAGE_NAME)] - Project compiled with -DDEBUG=1 option"

# Запускаем сборку deb пакета
build:
	@mkdir -p $(BUILDDIR)
	@checkinstall \
	--default \
	--nodoc \
	--pkgname=$(PACKAGE_NAME) \
	--pkgrelease=$(PACKAGE_VERSION) \
	--pkgversion=$$(date +%Y%m%d) \
	--pkgsource=$(SRCDIR) \
	--pakdir=$(BUILDDIR) \
	--maintainer=$(PACKAGE_EMAIL) \
	--pkglicense=$(PACKAGE_LICENSE) \
	--requires=$(DEPENDENCIES) \
	--install=$$(test ${install} == 'yes' && echo -n 'yes' || echo -n 'no') \
	--gzman=yes \
	--deldoc=yes \
	--deldesc=no \
	--delspec=yes \
	--backup=no \
	--autodoinst=yes \
	--strip=yes

# Очищаем каталог от временных файлов, которые появились после компиляции
clean:
	@printf "%`tput cols`s"|tr ' ' '-'
	@rm -rf $(CLEANED)
	@echo "[$(PACKAGE_NAME)] - Project cleaned"
	@printf "%`tput cols`s"|tr ' ' '-'

# Очищаем каталог от временных файлов, которые появились после выполнения ./configure
distclean:
	@printf "%`tput cols`s"|tr ' ' '-'
	@rm -rf $(DISTCLEANED)
	@echo "[$(PACKAGE_NAME)] - Dist cleaned"
	@printf "%`tput cols`s"|tr ' ' '-'

# Установка пакета:
# Копируем бинарник в папку:
# 	/usr/local/bin
# Копируем файлы локализации в папки:
# 	/usr/local/share/locale/passgen/ru_RU/LC_MESSAGES
# 	/usr/local/share/locale/passgen/en_US/LC_MESSAGES
# Копируем файлы manpage в папки:
# 	/usr/local/share/man/ru_RU/man1
# 	/usr/local/share/man/en_US/man1
install:
	@printf "%`tput cols`s"|tr ' ' '-'
	@install -D $(BINDIR)/$(PACKAGE_NAME) $(bindir)
	@for localedir in $(LOCALES); do \
		l=$$(basename $$localedir) && \
		install -D $$localedir/LC_MESSAGES/$(LOCALE_MO) $(localedir)/$(PACKAGE_NAME)/$$l/LC_MESSAGES && \
		install -D -g 0 -o 0 -m 0644 $(MANDIR)/$$l/$(PACKAGE_NAME).1 $(mandir)/$$l/man1/$(PACKAGE_NAME).1 && \
		gzip --force $(mandir)/$$l/man1/$(PACKAGE_NAME).1; \
	done
	@echo "[$(PACKAGE_NAME)] - installed to $$(which $(PACKAGE_NAME))"
	@printf "%`tput cols`s"|tr ' ' '-'

# Удаление пакета:
# Удаляем бинарник из папки:
# 	/usr/local/bin
# Удаляем файлы локализации из папок:
# 	/usr/local/share/locale/passgen/ru_RU/LC_MESSAGES
# 	/usr/local/share/locale/passgen/en_US/LC_MESSAGES
# Удаляем файлы manpage из папок:
# 	/usr/local/share/man/ru_RU/man1
# 	/usr/local/share/man/en_US/man1
uninstall:
	@printf "%`tput cols`s"|tr ' ' '-'
	@rm -rf $(bindir)/$(PACKAGE_NAME)
	@for localedir in $(LOCALES); do \
		l=$$(basename $$localedir) && \
		rm -rf $(mandir)/$$l/man1/$(PACKAGE_NAME)*; \
	done
	@rm -rf $(localedir)/$(PACKAGE_NAME)
	@echo "[$(PACKAGE_NAME)] - uninstalled"
	@printf "%`tput cols`s"|tr ' ' '-'

# Выполняем тесты для бинарного файла программы и выводим результаты
check:
	@printf "%`tput cols`s"|tr ' ' '-'
	@test $$($(BINDIR)/$(PACKAGE_NAME) -l20 -ds | wc -m) == '21' && \
	echo $(ONELINEOKMSG) || \
	echo $(ONELINEERRMSG)
	@test $$($(BINDIR)/$(PACKAGE_NAME) -l20 -ds -c5 | wc -l) == '5' && \
	echo $(MULTILINEOKMSG) || \
	echo $(MULTILINEERRMSG)
	@printf "%`tput cols`s"|tr ' ' '-'

# Выводим справку по целям Makefile
help:
	@printf "%`tput cols`s"|tr ' ' '-'
	@echo -e "`cat ./resource/make/help`"
	@printf "%`tput cols`s"|tr ' ' '-'

# Генерируем документацию
doc:
	@printf "%`tput cols`s"|tr ' ' '-'
	@cat ./resource/readme/1 > ./README.md
	@test $$(which $(PACKAGE_NAME)) != "" && $(PACKAGE_NAME) -h >> ./README.md || $(BINDIR)/$(PACKAGE_NAME) -h >> ./README.md
	@cat ./resource/readme/2 >> ./README.md
	@echo -e "`cat ./resource/make/help`" >> ./README.md
	@echo "\`\`\`" >> ./README.md
	@cat ./resource/readme/3 >> ./README.md
	@echo "[$(PACKAGE_NAME)] - README.md created"
	@groff -mandoc -t -e -Tascii $(MANDIR)/en_US/$(PACKAGE_NAME).1 | col -bx > en_US.man
	@printf "%`tput cols`s"|tr ' ' '-'
