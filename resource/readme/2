```

- - -
## Указать явное использование языка

**Поддерживается русская и английская локализация**

```bash
$ LANG=ru_RU passgen -h
$ LANG=en_US passgen -h
```

**Если нужная локализация не найдена, то будет использована английская.**

**man так же доступен на 2-х языках**


```bash
$ man -L ru_RU passgen
$ man -L en_US passgen
```

- - -
## Скорость

Учитывая то, что программа написана на C, можно сказать, что работает очень быстро.

Для сравнения вот однострочная команда на **Bash** и вызов **passgen** с аналогичными параметрами:

```bash
$ time strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
RHAoe9kbZDUDvSk2vgyiwLfFSjWS7S
real    0m0.062s
user    0m0.036s
sys     0m0.056s

$ time passgen -l30 -u -d -n
ht5Qga8GN25D3sjebAQN5MBbUSX2Ka

real    0m0.005s
user    0m0.000s
sys     0m0.004s
```

А теперь повторим опыт и вызовем команду 100 раз подряд:

```bash
$ time for i in {1..100};do strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n' > /dev/null; done
real    0m8.881s
user    0m1.716s
sys     0m13.604s
$ time passgen -l30 -u -d -n -c100 > /dev/null
real    0m0.059s
user    0m0.004s
sys     0m0.048s
```

И даже миллион строк против 100 **passgen** сгенерировал быстрее в ~5 раз ))) (Выполнения **Bash** команды я так и не дождался и убил процесс)

```bash
$ time passgen -l30 -u -d -n -c1000000 > /dev/null
real    0m1.769s
user    0m1.692s
sys     0m0.072s
```

Как мы видим, генерация строки длиной 30 символов, состоящей из букв и цифр, у **passgen** заняла в разы меньше времени.

- - -
## Удаление

```bash
$ sudo make uninstall
```

**Если установили собранный deb пакет, то воспользуйтесь этой командой:**

```bash
$ sudo dpkg -r passgen
```

- - -
## Справка по командам make

```bash
$ make help
